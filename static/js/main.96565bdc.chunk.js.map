{"version":3,"sources":["constants.js","redux/selectors.js","redux/actionTypes.js","components/TodoItem.js","components/FilterList.js","App.js","redux/actions.js","redux/reducers/todos.js","redux/reducers/filters.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js"],"names":["VISIBILITY_FILTERS","selectTodosByFilterState","store","allTodos","todoState","todos","selectTodos","filterState","state","selectFilterState","console","log","completed","filter","todo","isDone","undo","ADD_TODO","DELETE_TODO","CLEAR_ALL_TODOS","MARK_TODOS","SET_FILTERS","TodoItemWrapper","styled","div","TodoContent","props","$isDone","TodoItemButton","Button","button","TodoItem","handleDeleteTodo","handleToggleIsDone","id","content","onClick","FilterTodo","FilterList","handleFilter","handleClearAll","TodoWrapper","Title","AddTodo","App","filtersTodos","useSelector","dispatch","useDispatch","useState","value","setValue","type","payload","deleteTodo","markTodos","placeholder","onChange","e","target","alert","name","map","todoId","initialState","combineReducers","action","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96565bdc.chunk.js","sourcesContent":["export const VISIBILITY_FILTERS = {\r\n  ALL: \"all\",\r\n  ACTIVE: \"active\",\r\n  COMPLETED: \"completed\",\r\n};\r\n","import { VISIBILITY_FILTERS } from \"../constants\";\r\nexport const selectTodos = (store) => store.todoState.todos;\r\nexport const selectFilterState = (store) => store.filterState.state;\r\nexport const selectTodosByFilterState = (store) => {\r\n  const allTodos = selectTodos(store);\r\n  const filterState = selectFilterState(store);\r\n  switch (filterState) {\r\n    case VISIBILITY_FILTERS.ALL: {\r\n      console.log(\"allTodos\", allTodos);\r\n      return allTodos;\r\n    }\r\n    case VISIBILITY_FILTERS.COMPLETED: {\r\n      const completed = allTodos.filter((todo) => todo.isDone);\r\n      console.log(\"completed\", completed);\r\n      return completed;\r\n    }\r\n    case VISIBILITY_FILTERS.ACTIVE: {\r\n      const undo = allTodos.filter((todo) => !todo.isDone);\r\n      console.log(\"undo\", undo);\r\n      return undo;\r\n    }\r\n    default:\r\n      return allTodos;\r\n  }\r\n};\r\n","export const ADD_TODO = \"add_todo\";\r\nexport const DELETE_TODO = \"delete_todo\";\r\nexport const CLEAR_ALL_TODOS = \"clear_todos\";\r\nexport const MARK_TODOS = \"mark_todos\";\r\nexport const SET_FILTERS = \"set_filters\";\r\n","import styled from \"styled-components\";\r\n\r\nconst TodoItemWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TodoContent = styled.div`\r\n  display: flex;\r\n  border: 1px solid gray;\r\n  padding: 6px;\r\n  border-radius: 4px;\r\n  width: 700px;\r\n  position: relative;\r\n  ${(props) => props.$isDone && `text-decoration: line-through`}\r\n`;\r\n\r\nconst TodoItemButton = styled.div`\r\n  position: absolute;\r\n  right: 4px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 4px;\r\n`;\r\n\r\nexport default function TodoItem({\r\n  todo,\r\n  handleDeleteTodo,\r\n  handleToggleIsDone,\r\n}) {\r\n  return (\r\n    <div>\r\n      <TodoItemWrapper data-todo-id={todo.id}>\r\n        <TodoContent $isDone={todo.isDone}>\r\n          {todo.content}\r\n          <TodoItemButton>\r\n            <Button\r\n              onClick={() => {\r\n                handleDeleteTodo(todo.id);\r\n              }}\r\n            >\r\n              delete\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                handleToggleIsDone(todo.id);\r\n              }}\r\n            >\r\n              {todo.isDone ? \"undone\" : \"done\"}\r\n            </Button>\r\n          </TodoItemButton>\r\n        </TodoContent>\r\n      </TodoItemWrapper>\r\n    </div>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\nconst FilterTodo = styled.div``;\r\nconst Button = styled.button`\r\n  margin-left: 4px;\r\n`;\r\n\r\nexport default function FilterList({ handleFilter, handleClearAll }) {\r\n  return (\r\n    <div>\r\n      <FilterTodo>\r\n        <Button onClick={() => handleFilter(VISIBILITY_FILTERS.ALL)}>\r\n          all\r\n        </Button>\r\n        <Button onClick={() => handleFilter(VISIBILITY_FILTERS.COMPLETED)}>\r\n          done\r\n        </Button>\r\n        <Button onClick={() => handleFilter(VISIBILITY_FILTERS.ACTIVE)}>\r\n          undo\r\n        </Button>\r\n        <Button onClick={handleClearAll}>clear all</Button>\r\n      </FilterTodo>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTodosByFilterState } from \"./redux/selectors.js\";\r\nimport {\r\n  addTodo,\r\n  clearAllTodos,\r\n  deleteTodo,\r\n  setFilters,\r\n  markTodos,\r\n} from \"./redux/actions\";\r\nimport styled from \"styled-components\";\r\nimport TodoItem from \"./components/TodoItem.js\";\r\nimport FilterList from \"./components/FilterList.js\";\r\nconst TodoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 1px solid gray;\r\n  margin-bottom: 24px;\r\n`;\r\nconst Title = styled.div`\r\n  font-size: 36px;\r\n`;\r\nconst AddTodo = styled.div`\r\n  margin-bottom: 12px;\r\n`;\r\nconst Button = styled.button`\r\n  margin-left: 4px;\r\n`;\r\n\r\nfunction App() {\r\n  const filtersTodos = useSelector(selectTodosByFilterState);\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleAddTodo = () => {\r\n    if (!value) {\r\n      return alert(\"not typing any word\");\r\n    }\r\n    dispatch(addTodo(value));\r\n    setValue(\"\");\r\n  };\r\n  const handleInputChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleDeleteTodo = (id) => {\r\n    dispatch(deleteTodo(id));\r\n  };\r\n  const handleToggleIsDone = (id) => {\r\n    dispatch(markTodos(id));\r\n  };\r\n  const handleClearAll = () => {\r\n    dispatch(clearAllTodos());\r\n  };\r\n  const handleFilter = (name) => {\r\n    dispatch(setFilters(name));\r\n  };\r\n  return (\r\n    <div>\r\n      <TodoWrapper>\r\n        <Title>Todo List</Title>\r\n        <AddTodo>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"please type todos\"\r\n            value={value}\r\n            onChange={handleInputChange}\r\n          />\r\n          <Button onClick={handleAddTodo}>add</Button>\r\n        </AddTodo>\r\n        <FilterList\r\n          handleClearAll={handleClearAll}\r\n          handleFilter={handleFilter}\r\n        />\r\n      </TodoWrapper>\r\n      {filtersTodos.map((todo) => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          handleDeleteTodo={handleDeleteTodo}\r\n          handleToggleIsDone={handleToggleIsDone}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  ADD_TODO,\r\n  DELETE_TODO,\r\n  CLEAR_ALL_TODOS,\r\n  MARK_TODOS,\r\n  SET_FILTERS,\r\n} from \"./actionTypes\";\r\nexport function addTodo(content) {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: {\r\n      content,\r\n    },\r\n  };\r\n}\r\nexport function deleteTodo(id) {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: {\r\n      id,\r\n    },\r\n  };\r\n}\r\nexport function markTodos(id) {\r\n  return {\r\n    type: MARK_TODOS,\r\n    payload: {\r\n      id,\r\n    },\r\n  };\r\n}\r\nexport function clearAllTodos() {\r\n  return {\r\n    type: CLEAR_ALL_TODOS,\r\n    payload: {\r\n      content: [],\r\n    },\r\n  };\r\n}\r\n\r\nexport function setFilters(filter) {\r\n  return {\r\n    type: SET_FILTERS,\r\n    payload: {\r\n      filter,\r\n    },\r\n  };\r\n}\r\n","import {\r\n  ADD_TODO,\r\n  CLEAR_ALL_TODOS,\r\n  DELETE_TODO,\r\n  MARK_TODOS,\r\n} from \"../actionTypes\";\r\nlet todoId = 2;\r\nconst initialState = {\r\n  todos: [\r\n    { id: 0, content: \"study math\", isDone: true },\r\n    { id: 1, content: \"play basketball with joe\", isDone: false },\r\n  ],\r\n};\r\n\r\nexport default function todoReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          ...state.todos,\r\n\r\n          { id: todoId++, content: action.payload.content, isDone: false },\r\n        ],\r\n      };\r\n    }\r\n    case DELETE_TODO: {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== action.payload.id),\r\n      };\r\n    }\r\n    case MARK_TODOS: {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) => {\r\n          if (todo.id !== action.payload.id) return todo;\r\n          return {\r\n            ...todo,\r\n            isDone: !todo.isDone,\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case CLEAR_ALL_TODOS: {\r\n      return {\r\n        ...state,\r\n        todos: action.payload.content,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { SET_FILTERS } from \"../actionTypes\";\r\nimport { VISIBILITY_FILTERS } from \"../../constants\";\r\nconst initialState = {\r\n  state: VISIBILITY_FILTERS.ALL,\r\n};\r\n\r\nexport default function todoReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_FILTERS: {\r\n      return {\r\n        state: action.payload.filter,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport todos from \"./todos\";\r\nimport filters from \"./filters\";\r\nexport default combineReducers({ todoState: todos, filterState: filters });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nexport default createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}